# Alternative Konfiguration mit Secrets-Datei
esphome:
  name: "clock-2-0"
  friendly_name: "Clock 2.0"

esp8266:
  board: d1_mini

# WiFi-Konfiguration mit Secrets
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  
  ap:
    ssid: "Clock-2-0 Fallback Hotspot"
    password: "12345678"

logger:

api:
  encryption:
    key: !secret api_encryption_key

ota:
  - platform: esphome
    password: !secret ota_password

web_server:
  port: 80

# Home Assistant Zeit-Synchronisation
time:
  - platform: homeassistant
    id: homeassistant_time
    timezone: "Europe/Berlin"
    on_time_sync:
      then:
        - logger.log: "Zeit mit Home Assistant synchronisiert"
        - lambda: |-
            ESP_LOGI("time", "Aktuelle Zeit: %s", id(homeassistant_time).now().strftime("%Y-%m-%d %H:%M:%S").c_str());

# SPI für LED Matrix
spi:
  clk_pin: D5   # CLK
  mosi_pin: D7  # DIN/DOUT

# Font für LED Matrix - eight-bit-dragon Schriftart
font:
  - file: "eight_bit_dragon/eight-bit-dragon.otf"
    id: digit_font
    size: 8
    glyphs: "0123456789:.- ABCDEFGHIJKLMNOPQRSTUVWXYZ"

# 32x8 LED Matrix Display (4x MAX7219)
display:
  - platform: max7219digit
    cs_pin: D8  # CS
    num_chips: 4  # 4 verkettete 8x8 Matrizen
    intensity: 8  # Helligkeit (0-15)
    rotate_chip: 0
    reverse_enable: false
    lambda: |-
      // Aktuelle Zeit von Home Assistant abrufen
      auto time = id(homeassistant_time).now();
      if (time.is_valid()) {
        // Alle 5 Sekunden zwischen Zeit und Datum wechseln
        static uint32_t last_switch = 0;
        static bool show_time = true;
        
        uint32_t now_ms = millis();
        if (now_ms - last_switch > 5000) {  // 5 Sekunden
          show_time = !show_time;
          last_switch = now_ms;
        }
        
        if (show_time) {
          // Zeit im Format HH:MM anzeigen
          it.strftime(3, 0, id(digit_font), "%H:%M", time);
        } else {
          // Datum im Format DD.MM anzeigen
          it.strftime(3, 0, id(digit_font), "%d.%m", time);
        }
      } else {
        // Fallback wenn Zeit nicht verfügbar
        it.print(3, 0, id(digit_font), "--:--");
      }
      
# Status-LED
output:
  - platform: gpio
    pin: D4  # Onboard LED (invertiert)
    id: onboard_led
    inverted: true

light:
  - platform: binary
    name: "Status LED"
    output: onboard_led
    id: status_led

# Sensoren
sensor:
  - platform: wifi_signal
    name: "WiFi Signal"
    update_interval: 60s
  - platform: uptime
    name: "Uptime"
    update_interval: 60s

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "IP Address"
    ssid:
      name: "Connected SSID"
  - platform: version
    name: "ESPHome Version"

button:
  - platform: restart
    name: "Restart"
